// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title PlayToEarn
 * @dev A basic Play-to-Earn game contract where players can earn rewards based on their achievements
 */
contract PlayToEarn is Ownable, ReentrancyGuard {
    IERC20 public rewardToken;
    
    // Track player data
    struct Player {
        uint256 level;
        uint256 experience;
        uint256 lastRewardClaim;
        bool isRegistered;
    }
    
    mapping(address => Player) public players;
    
    // Reward rates per level (tokens per day)
    uint256 public baseRewardRate = 10 * 10**18; // 10 tokens per day for level 1
    
    // Minimum time between reward claims (1 day)
    uint256 public constant CLAIM_COOLDOWN = 1 days;
    
    // Events
    event PlayerRegistered(address indexed player);
    event ExperienceGained(address indexed player, uint256 amount, uint256 newLevel);
    event RewardClaimed(address indexed player, uint256 amount);
    
    constructor(address _rewardToken) Ownable(msg.sender) {
        rewardToken = IERC20(_rewardToken);
    }
    
    /**
     * @dev Register a new player
     */
    function registerPlayer() external {
        require(!players[msg.sender].isRegistered, "Player already registered");
        
        players[msg.sender] = Player({
            level: 1,
            experience: 0,
            lastRewardClaim: block.timestamp,
            isRegistered: true
        });
        
        emit PlayerRegistered(msg.sender);
    }
    
    /**
     * @dev Game server records player achievements and grants experience
     * @param player Address of the player
     * @param experiencePoints Amount of experience to add
     */
    function addExperience(address player, uint256 experiencePoints) external onlyOwner {
        require(players[player].isRegistered, "Player not registered");
        
        players[player].experience += experiencePoints;
        
        // Level up logic (simple implementation)
        // Each level requires level * 100 experience points
        uint256 experienceForNextLevel = players[player].level * 100;
        
        if (players[player].experience >= experienceForNextLevel) {
            players[player].level += 1;
        }
        
        emit ExperienceGained(player, experiencePoints, players[player].level);
    }
    
    /**
     * @dev Players claim their rewards based on their level and time since last claim
     */
    function claimRewards() external nonReentrant {
        Player storage player = players[msg.sender];
        require(player.isRegistered, "Player not registered");
        require(block.timestamp >= player.lastRewardClaim + CLAIM_COOLDOWN, "Reward on cooldown");
        
        // Calculate rewards based on player level and time passed
        uint256 timeElapsed = block.timestamp - player.lastRewardClaim;
        uint256 reward = (baseRewardRate * player.level * timeElapsed) / 1 days;
        
        // Update last claim time
        player.lastRewardClaim = block.timestamp;
        
        // Transfer rewards
        require(rewardToken.transfer(msg.sender, reward), "Reward transfer failed");
        
        emit RewardClaimed(msg.sender, reward);
    }
}
